---
title: "Client Report - [Project 0: Introduction]"
subtitle: "Course DS 250"
author: "[Joshua Ludwig]"
format:
  html:
    self-contained: true
    page-layout: full
    title-block-banner: true
    toc: true
    toc-depth: 3
    toc-location: body
    number-sections: false
    html-math-method: katex
    code-fold: true
    code-summary: "Show the code"
    code-overflow: wrap
    code-copy: hover
    code-tools:
        source: false
        toggle: true
        caption: See code
    
---

```{python}
#| label: libraries
#| include: false
import pandas as pd
import altair as alt
import numpy as np

from IPython.display import Markdown
from IPython.display import display
from tabulate import tabulate
```


## Elevator pitch

_This is code used to anaysis the data of from "mpg.csv". This shows the miles per gallon used from each class of car and on which highway it was recorded on._

```{python}
#| label: project data
#| code-summary: Read and format project data
#| include: false
mpg =pd.read_csv("mpg.csv")
```

## GRAND QUESTION 1

__In VS Code, write a python script to create the example Altair chart from section 3.2.2 of the textbook.__


```{python}
#| label: GQ1
#| code-summary: mpg data
#| fig-cap: "mpg data"
#| fig-align: center
base = (alt.Chart(mpg.rename(columns = {"class": "class1"}))
  .encode(
    x = "displ",
    y = "hwy"
    ))

chart_smooth_sub = (base
  .transform_filter(alt.datum.class1 == "subcompact")
  .transform_loess("displ", "hwy")
  .mark_line()
)  

chart = base.encode(color = "class1").mark_circle() + chart_smooth_sub

display(chart)
```

```{python}
#| label: GQ1 table
#| code-summary: mpg data
#| tbl-cap: "mpg data"
#| tbl-cap-location: top
print(mpg
    .head(5)
    .filter(["manufacturer", "model","year", "hwy"])
    .to_markdown(index=False))

```



## APPENDIX A (Additional Python Code)

```python
import pandas as pd
import altair as alt

# %%Loading in data

mpg =pd.read_csv("mpg.csv")
print(mpg
    .head(5)
    .filter(["manufacturer", "model","year", "hwy"])
    .to_markdown(index=False))



# %%
chartleft = (alt.Chart(mpg)
  .encode(
    x = "displ",
    y = "hwy",
    )
  .transform_loess("displ", "hwy")
  .mark_line())




#%%
chartmiddle = (alt.Chart(mpg)
  .encode(
    x = "displ",
    y = "hwy",
    detail = "drv"
    )
  .transform_loess("displ", "hwy", groupby = ["drv"])
  .mark_line())

print(chartmiddle)




#%%
chartright = (alt.Chart(mpg)
  .encode(
    x = "displ",
    y = "hwy",
    color=alt.Color("drv", legend=None)
    )
  .transform_loess("displ", "hwy", groupby = ["drv"])
  .mark_line())
#%%
chartleft.save("altair_chartleft.png")
chartmiddle.save("altair_chartmiddle.png")
chartright.save("altair_chartright.png")

# %%
chartp = (alt.Chart(mpg)
  .encode(
    x = "displ",
    y = "hwy"
  )
  .mark_circle()
)

chart = chartp + chartleft  

chart.save("altair_chartcombine.png")
  

# %%
base =(alt.Chart(mpg)
  .encode(
    x = "displ",
    y = "hwy"
  ))

chart = base.encode(color = "drv").mark_circle() + base.transform_loess("displ", "hwy").mark_line()

chart.save("altair_combine_clean_color.png")
# %%

#column name of class does not work nicely with Altair filter.

base = (alt.Chart(mpg.rename(columns = {"class": "class1"}))
  .encode(
    x = "displ",
    y = "hwy"
    ))

chart_smooth_sub = (base
  .transform_filter(alt.datum.class1 == "subcompact")
  .transform_loess("displ", "hwy")
  .mark_line()
)  

chart = base.encode(color = "class1").mark_circle() + chart_smooth_sub

chart.save("altair_combine_clean_color_filter.png")
```
